# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

#on: [push, pull_request]
on:
  workflow_dispatch:
    inputs:
      tag_date:
        description: 'tag date'     
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        build_target: [windows-x64, windows-x86, android-arm64, android-armeabi, android-x86, android-x86_64, linux-arm, linux-x86, linux-x64, macos, ios]
        build_type: [Release]
        include:
          - build_target: windows-x64
            os: windows-latest
            preset: windows-x64
          - build_target: windows-x86
            os: windows-latest
            preset: windows-x86
          - build_target: android-arm64
            os: windows-latest
            preset: android-arm64
          - build_target: android-armeabi
            os: windows-latest
            preset: android-armeabi
          - build_target: android-x86
            os: windows-latest
            preset: android-x86
          - build_target: android-x86_64
            os: windows-latest
            preset: android-x86_64
          - build_target: linux-arm
            os: ubuntu-latest
            preset: linux-arm
          - build_target: linux-x86
            os: ubuntu-latest
            preset: linux-x86
          - build_target: linux-x64
            os: ubuntu-latest
            preset: linux-x64
          - build_target: macos
            os: macos-latest
            preset: macos
          - build_target: ios
            os: macos-latest
            preset: ios
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/${{ matrix.preset }}" >> "$GITHUB_OUTPUT"
        echo "cmake-dir=${{ github.workspace }}/build_libs" >> "$GITHUB_OUTPUT"

    - name: Install Ninja (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get install ninja-build

    - name: Install Ninja (Windows)
      if: startsWith(matrix.os, 'windows')
      run: choco install ninja

    - name: Install Ninja (macOS)
      if: startsWith(matrix.os, 'macOS')
      run: brew install ninja

    - name: Setup MSVC (Windows)
      if: startsWith(matrix.preset, 'windows')
      uses: ilammy/msvc-dev-cmd@v1.4.1

    - name: Set up Android SDK and NDK
      if: startsWith(matrix.preset, 'android')
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: false
        local-cache: true
      
    - name: Set up Android SDK and NDK
      if: startsWith(matrix.preset, 'android')
      run: |
        echo "ndk-path=${{ steps.setup-ndk.outputs.ndk-path }}"
        cd ${{ steps.setup-ndk.outputs.ndk-path }}
        ls
        echo "ANDROID_NDK_HOME=${{steps.setup-ndk.outputs.ndk-path}}" >> $GITHUB_ENV
        echo "NDK_ROOT=${{steps.setup-ndk.outputs.ndk-path}}\ndk\22.1.7171670" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ steps.strings.outputs.cmake-dir }}
        --preset=${{ matrix.preset }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      