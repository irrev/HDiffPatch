# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

#on: [push, pull_request]
on:
  workflow_dispatch:
    inputs:
      tag_date:
        description: 'tag date'     
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env: # update README for devs if you modify these env. variables
      QT_VERSION: '6.6.3' # use scripts/update_qt_version.bash to change
      ANDROIDAPI: 29
      NDK_VERSION: '25.1.8937393'
      NDK_VERSION_FULL: r21e
      JDK_VERSION: 11
      SDK_PLATFORM: android-21
      SDK_BUILD_TOOLS: 33.0.1
      XC_VERSION: ${{ '15.2' }}
      CMAKE_VERSION: '3.29.0'
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        build_target: [windows-x64, windows-x86, android-arm64, android-armeabi, android-x86, android-x86_64, linux-arm, linux-x86, linux-x64, macos, ios]
        build_type: [Release]
        include:
          - build_target: windows-x64
            os: windows-latest
            preset: windows-x64
          - build_target: windows-x86
            os: windows-latest
            preset: windows-x86
          - build_target: android-arm64
            os: ubuntu-latest
            preset: android-arm64
          - build_target: android-armeabi
            os: ubuntu-latest
            preset: android-armeabi
          - build_target: android-x86
            os: ubuntu-latest
            preset: android-x86
          - build_target: android-x86_64
            os: ubuntu-latest
            preset: android-x86_64
          - build_target: linux-arm
            os: ubuntu-latest
            preset: linux-arm
          - build_target: linux-x86
            os: ubuntu-latest
            preset: linux-x86
          - build_target: linux-x64
            os: ubuntu-latest
            preset: linux-x64
          - build_target: macos
            os: macos-latest
            preset: macos
          - build_target: ios
            os: macos-latest
            preset: ios
    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/${{ matrix.preset }}" >> "$GITHUB_OUTPUT"
        echo "cmake-dir=${{ github.workspace }}/build_libs" >> "$GITHUB_OUTPUT"

    #- name: Install Ninja (Ubuntu)
    #  if: startsWith(matrix.os, 'ubuntu')
    #  run: sudo apt-get install ninja-build
#
    #- name: Install Ninja (Windows)
    #  if: startsWith(matrix.os, 'windows')
    #  run: choco install ninja
#
    #- name: Install Ninja (macOS)
    #  if: startsWith(matrix.os, 'macOS')
    #  run: brew install ninja

    - name: Install CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ env.CMAKE_VERSION }}

    - name: Setup Xcode
      if: startsWith(matrix.os, 'macos')
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XC_VERSION }}

    - name: Setup MSVC (Windows)
      if: startsWith(matrix.preset, 'windows')
      uses: ilammy/msvc-dev-cmd@v1.4.1

    - name: Set up NDK
      if: startsWith(matrix.preset, 'android')
      uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: ${{ env.NDK_VERSION_FULL }}
        add-to-path: true
        local-cache: false

    - name: Set up JDK
      if: startsWith(matrix.preset, 'android')
      uses: actions/setup-java@v2
      with:
       java-version: ${{ env.JDK_VERSION }}
       distribution: zulu

    - name: Setup Android SDK
      if: startsWith(matrix.preset, 'android')
      uses: malinskiy/action-android/install-sdk@release/0.1.2

    - name: Install Android Tools
      if: startsWith(matrix.preset, 'android')
      run: |
        sdkmanager --licenses && sdkmanager --verbose "platforms;${SDK_PLATFORM}" "build-tools;${SDK_BUILD_TOOLS}" tools platform-tools

      
    - name: Set up Android SDK and NDK
      if: startsWith(matrix.preset, 'android')
      run: |
        echo "NDK_ROOT=${{steps.setup-ndk.outputs.ndk-path}}" >> $GITHUB_ENV

    - name: Configure CMake (Windows)
      if: startsWith(matrix.preset, 'windows')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ steps.strings.outputs.cmake-dir }}
        --preset=${{ matrix.preset }}

    - name: Configure CMake (Linux)
      if: startsWith(matrix.preset, 'linux')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ steps.strings.outputs.cmake-dir }}
        --preset=${{ matrix.preset }}

    - name: Configure CMake (Mac)
      if: startsWith(matrix.preset, 'mac')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ steps.strings.outputs.cmake-dir }}
        --preset=${{ matrix.preset }}

    - name: Configure CMake (iOS)
      if: startsWith(matrix.preset, 'ios')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ steps.strings.outputs.cmake-dir }}
        --preset=${{ matrix.preset }}

    - name: Configure CMake (Android)
      if: startsWith(matrix.preset, 'android')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -S ${{ steps.strings.outputs.cmake-dir }}
        -DCMAKE_ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}
        -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup-ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake
        --preset=${{ matrix.preset }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      